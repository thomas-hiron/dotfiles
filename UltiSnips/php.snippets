###############
#  Shortcuts  #
###############

snippet t "this"
$this->${1};
endsnippet

snippet / "Comment"
/* ${1} */
endsnippet

snippet // "Multiline comment"
/**
 * ${1}
 */
endsnippet

snippet new "New class instance"
$${1} = new ${1/\w+\s*/\u$0/}($2);
endsnippet

snippet d "dump"
dump(${1});
endsnippet

snippet d "dump"
dump(${1});
endsnippet

snippet vd "var_dump"
var_dump(${1});
endsnippet

snippet rn "return null"
return null;
endsnippet

snippet v "MyVar $myVar" i
${1/\w+\s*/\u$0/} ${1}${2}
endsnippet

snippet con "__construct"
public function __construct(
    ${2}
) {
}
endsnippet

###########
#  Class  #
###########

snippet class "Class PHP"
<?php

class ${1:ClassName}
{
    ${2}
}
endsnippet

snippet classc "Class PHP with constructor"
<?php

class ${1:ClassName}
{
    public function __construct(
        ${2}
    ) {
    }
}
endsnippet

###############
#  Functions  #
###############

snippet pub "public function"
public function ${1:functionName}(${2}): ${3:void}
{
    ${4}
}
endsnippet

snippet pro "protected function"
protected function ${1:functionName}(${2}): ${3:void}
{
    ${4}
}
endsnippet

snippet pri "private function"
private function ${1:functionName}(${2}): ${3:void}
{
    ${4}
}
endsnippet

snippet pubs "public static function"
public static function ${1:functionName}(${2}): ${3:void}
{
    ${4}
}
endsnippet

snippet pros "protected static function"
protected static function ${1:functionName}(${2}): ${3:void}
{
    ${4}
}
endsnippet

snippet pris "private static function"
private static function ${1:functionName}(${2}): ${3:void}
{
    ${4}
}
endsnippet

#####################
#  Getters/Setters  #
#####################

snippet set "Getter and fluent setter"
public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}

public function set${1/\w+\s*/\u$0/}($2 $$1): self
{
    $this->$1 = $$1;

    return $this;
}
endsnippet

snippet iset "Isset and fluent setter"
public function is${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}

public function set${1/\w+\s*/\u$0/}($2 $$1): self
{
    $this->$1 = $$1;

    return $this;
}
endsnippet

snippet cset "Getter and fluent setter for a collection"
/**
 * @return ${1/\w+\s*/\u$0/}[]|Collection
 */
public function get${1/\w+\s*/\u$0/}s(): iterable
{
    return $this->$1s;
}

public function add${1/\w+\s*/\u$0/}(${1/\w+\s*/\u$0/} $$1): self
{
    if (!$this->$1s->contains($$1)) {
        $this->$1s->add($$1);
        $$1->set${2}($this);
    }

    return $this;
}

public function remove${1/\w+\s*/\u$0/}(${1/\w+\s*/\u$0/} $$1): self
{
    $this->$1s->removeElement($$1);

    return $this;
}
endsnippet

snippet aset "Getter and fluent setter for an array"
public function get${1/\w+\s*/\u$0/}s(): array
{
    return $this->$1s;
}

public function add${1/\w+\s*/\u$0/}(${2} $$1): self
{
    if (!\in_array($$1, $this->$$1s)) {
        $this->$$1s[] = $$1;
    }

    return $this;
}

public function remove${1/\w+\s*/\u$0/}($2 $$1): self
{
    if (false !== $index = \array_search($$1, $this->$$1s, true)) {
        unset($this->$$1s[$index]);
    }

    return $this;
}
endsnippet

############
#  Blocks  #
############

snippet if "if"
if (${1}) {
	$2
}
endsnippet

snippet ife "if else"
if (${1}) {
    ${2}
} else {
    ${3}
}
endsnippet

snippet else "else"
else {
	$1
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; ++$$2) {
	$3
}
endsnippet

snippet fore "Foreach loop"
foreach ($${1:variable} as $${2:value}) {
    $3
}
endsnippet

snippet forek "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${4}
}
endsnippet

snippet try "try/catch"
try {
    $1
} catch (${2:Exception} $e) {
    $3
}
endsnippet

snippet catch "catch"
catch (${1} $e) {
    $2
}
endsnippet

snippet ? "ternary"
$1 ? $2 : $3
endsnippet

snippet fn "closure"
fn (${1}) => ${2}
endsnippet

snippet fnu "closure"
fn (${1}) use (${2}) => ${3}
endsnippet
